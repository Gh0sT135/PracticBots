import asyncio
import base64
import html
from config import BOT_TOKEN
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import Command, StateFilter
from aiogram.client.default import DefaultBotProperties
from aiogram.types import BotCommand
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from cryptography.fernet import Fernet

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---


bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()


# --- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM ---
class Form(StatesGroup):
    waiting_for_morse = State()
    waiting_for_demorse = State()
    waiting_for_bin = State()
    waiting_for_debin = State()
    waiting_for_b64 = State()
    waiting_for_deb64 = State()
    waiting_for_encrypt = State()
    waiting_for_decrypt = State()
    waiting_for_decrypt_key = State()


# --- –®–∏—Ñ—Ä—ã ---
MORSE_CODE = {
    'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.',
    'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---',
    'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---',
    'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-',
    'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--',
    'Z': '--..', '0': '-----', '1': '.----', '2': '..---', '3': '...--',
    '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..',
    '9': '----.', ' ': '/',
    '.': '.-.-.-', ',': '--..--', '?': '..--..', "'": '.----.', '!': '-.-.--',
    '/': '-..-.', '(': '-.--.', ')': '-.--.-', '&': '.-...', ':': '---...',
    ';': '-.-.-.', '=': '-...-', '+': '.-.-.', '-': '-....-', '_': '..--.-',
    '"': '.-..-.', '$': '...-..-', '@': '.--.-.'
}

REVERSE_MORSE = {v: k for k, v in MORSE_CODE.items()}


# --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üîê <b>–ë–æ—Ç-—à–∏—Ñ—Ä–æ–≤–∞–ª—å—â–∏–∫</b>\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/morse - –ö–æ–¥–∏—Ä–æ–≤–∞—Ç—å –≤ –ú–æ—Ä–∑–µ üì° (Only Eng)\n"
        "/demorse - –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏–∑ –ú–æ—Ä–∑–µ\n"
        "/bin - –ö–æ–¥–∏—Ä–æ–≤–∞—Ç—å –≤ –±–∏–Ω–∞—Ä–Ω—ã–π –∫–æ–¥ 0Ô∏è‚É£1Ô∏è‚É£\n"
        "/debin - –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏–∑ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –∫–æ–¥–∞\n"
        "/b64 - –ö–æ–¥–∏—Ä–æ–≤–∞—Ç—å –≤ Base64  üìÉ (ASCII)\n"
        "/deb64 - –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏–∑ Base64 (ASCII)\n"
        "/encrypt - –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç üîí (Fernet)\n"
        "/decrypt - –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç üîì  (Fernet)\n\n"
        "<i>–ü—Ä–∏–º–µ—Ä: –≤—ã–±–µ—Ä–∏—Ç–µ /morse –∏ –≤–≤–µ–¥–∏—Ç–µ SOS</i>"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ
@dp.message(Command("morse"))
async def morse_command(message: types.Message, state: FSMContext):
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ú–æ—Ä–∑–µ:")
    await state.set_state(Form.waiting_for_morse)


@dp.message(Command("demorse"))
async def demorse_command(message: types.Message, state: FSMContext):
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ú–æ—Ä–∑–µ –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:")
    await state.set_state(Form.waiting_for_demorse)


@dp.message(Command("bin"))
async def bin_command(message: types.Message, state: FSMContext):
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±–∏–Ω–∞—Ä–Ω—ã–π –∫–æ–¥:")
    await state.set_state(Form.waiting_for_bin)


@dp.message(Command("debin"))
async def debin_command(message: types.Message, state: FSMContext):
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –±–∏–Ω–∞—Ä–Ω—ã–π –∫–æ–¥ –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:")
    await state.set_state(Form.waiting_for_debin)


@dp.message(Command("b64"))
async def b64_command(message: types.Message, state: FSMContext):
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Base64:")
    await state.set_state(Form.waiting_for_b64)


@dp.message(Command("deb64"))
async def deb64_command(message: types.Message, state: FSMContext):
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ Base64-–∫–æ–¥ –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:")
    await state.set_state(Form.waiting_for_deb64)


@dp.message(Command("encrypt"))
async def encrypt_command(message: types.Message, state: FSMContext):
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (Fernet):")
    await state.set_state(Form.waiting_for_encrypt)


@dp.message(Command("decrypt"))
async def decrypt_command(message: types.Message, state: FSMContext):
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏:")
    await state.set_state(Form.waiting_for_decrypt)
    await state.update_data(step="waiting_for_text")
@dp.message(Form.waiting_for_bin)
async def process_bin(message: types.Message, state: FSMContext):
    text = message.text
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º UTF-8 –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä—É—Å—Å–∫–æ–≥–æ
    binary = ' '.join(format(byte, '08b') for byte in text.encode('utf-8'))
    await message.answer(f"üî¢ –ë–∏–Ω–∞—Ä–Ω—ã–π –∫–æ–¥ (UTF-8):\n<code>{binary}</code>")
    await state.clear()

@dp.message(Form.waiting_for_debin)
async def process_debin(message: types.Message, state: FSMContext):
    binary_str = message.text
    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–∞–π—Ç—ã (–ø–æ 8 –±–∏—Ç)
        bytes_list = [int(byte, 2) for byte in binary_str.split()]
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–∞–π—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ç–µ–∫—Å—Ç —Å UTF-8
        text = bytes(bytes_list).decode('utf-8')
        escaped_text = html.escape(text)
        await message.answer(f"üî¢ –¢–µ–∫—Å—Ç:\n<code>{escaped_text}</code>")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message(Form.waiting_for_morse)
async def process_morse(message: types.Message, state: FSMContext):
    text = message.text.upper()
    encoded = []
    for char in text:
        if char in MORSE_CODE:
            encoded.append(MORSE_CODE[char])
        else:
            encoded.append('ÔøΩ')
    await message.answer(f"üì° –ú–æ—Ä–∑–µ-–∫–æ–¥:\n<code>{' '.join(encoded)}</code>")
    await state.clear()


@dp.message(Form.waiting_for_demorse)
async def process_demorse(message: types.Message, state: FSMContext):
    code = message.text
    decoded = []
    for part in code.split():
        if part in REVERSE_MORSE:
            decoded.append(REVERSE_MORSE[part])
        else:
            decoded.append('ÔøΩ')
    escaped_text = html.escape(''.join(decoded))
    await message.answer(f"üì° –¢–µ–∫—Å—Ç:\n<code>{escaped_text}</code>")
    await state.clear()


@dp.message(Form.waiting_for_bin)
async def process_bin(message: types.Message, state: FSMContext):
    text = message.text
    binary = ' '.join(format(ord(c), '08b') for c in text)
    await message.answer(f"üî¢ –ë–∏–Ω–∞—Ä–Ω—ã–π –∫–æ–¥:\n<code>{binary}</code>")
    await state.clear()


@dp.message(Form.waiting_for_debin)
async def process_debin(message: types.Message, state: FSMContext):
    binary_str = message.text
    binary_list = binary_str.split()
    text = []

    for byte in binary_list:
        try:
            if not all(bit in '01' for bit in byte):
                text.append('ÔøΩ')
                continue

            clean_byte = byte.strip()
            if len(clean_byte) == 8:
                text.append(chr(int(clean_byte, 2)))
            else:
                text.append('ÔøΩ')
        except:
            text.append('ÔøΩ')

    escaped_text = html.escape(''.join(text))
    await message.answer(f"üî¢ –¢–µ–∫—Å—Ç:\n<code>{escaped_text}</code>")
    await state.clear()


@dp.message(Form.waiting_for_b64)
async def process_b64(message: types.Message, state: FSMContext):
    text = message.text
    encoded = base64.b64encode(text.encode()).decode()
    await message.answer(f"üìÑ Base64:\n<code>{encoded}</code>")
    await state.clear()


@dp.message(Form.waiting_for_deb64)
async def process_deb64(message: types.Message, state: FSMContext):
    code = message.text
    try:
        decoded = base64.b64decode(code).decode()
        escaped_text = html.escape(decoded)
        await message.answer(f"üìÑ –¢–µ–∫—Å—Ç:\n<code>{escaped_text}</code>")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
    await state.clear()


@dp.message(Form.waiting_for_encrypt)
async def process_encrypt(message: types.Message, state: FSMContext):
    text = message.text
    key = Fernet.generate_key()
    fernet = Fernet(key)
    encrypted = fernet.encrypt(text.encode())

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª—é—á –∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    await message.answer(f"üîë –ö–ª—é—á (—Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏):\n<code>{key.decode()}</code>")
    await message.answer(f"üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n<code>{encrypted.decode()}</code>")
    await state.clear()


@dp.message(Form.waiting_for_decrypt)
async def process_decrypt(message: types.Message, state: FSMContext):
    user_data = await state.get_data()

    if user_data.get("step") == "waiting_for_text":
        await state.update_data(encrypted_text=message.text)
        await message.answer("üîë –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏:")
        await state.update_data(step="waiting_for_key")
    else:
        encrypted_text = user_data.get("encrypted_text")
        key = message.text

        try:
            fernet = Fernet(key.encode())
            decrypted = fernet.decrypt(encrypted_text.encode()).decode()
            escaped_text = html.escape(decrypted)
            await message.answer(f"üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n<code>{escaped_text}</code>")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: {str(e)}")

        await state.clear()


# –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥
async def set_main_menu(bot: Bot):
    main_menu_commands = [
        BotCommand(command='/start', description='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'),
        BotCommand(command='/morse', description='–ö–æ–¥–∏—Ä–æ–≤–∞—Ç—å –≤ –ú–æ—Ä–∑–µ üì° '),
        BotCommand(command='/demorse', description='–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏–∑ –ú–æ—Ä–∑–µ üì°'),
        BotCommand(command='/bin', description='–ö–æ–¥–∏—Ä–æ–≤–∞—Ç—å –≤ –±–∏–Ω–∞—Ä–Ω—ã–π 0Ô∏è‚É£1Ô∏è‚É£'),
        BotCommand(command='/debin', description='–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏–∑ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ 0Ô∏è‚É£1Ô∏è‚É£'),
        BotCommand(command='/b64', description='–ö–æ–¥–∏—Ä–æ–≤–∞—Ç—å –≤ Base64 üìÉ (ASCII)'),
        BotCommand(command='/deb64', description='–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏–∑ Base64 üìÉ(ASCII)'),
        BotCommand(command='/encrypt', description='–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ üîí (Fernet)'),
        BotCommand(command='/decrypt', description='–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ üîì (Fernet)'),
    ]
    await bot.set_my_commands(main_menu_commands)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await set_main_menu(bot)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())